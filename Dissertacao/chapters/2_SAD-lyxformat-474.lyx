#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass scrbook
\options a4paper,titlepage
\use_default_options false
\maintain_unincluded_children false
\language brazilian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing onehalf
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 0
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 0
\use_package mhchem 1
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine natbib
\cite_engine_type authoryear
\biblio_style plainnat
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 3cm
\topmargin 4cm
\rightmargin 3cm
\bottommargin 3cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip bigskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle fancy
\tracking_changes false
\output_changes true
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
A construção de sistemas que sejam capazes de fornecer um suporte ao gestor
 em um processo de tomada de decisões vem sendo um desafio ao longo dos
 anos.
 Sistemas de Apoio a Decisão (SAD) 
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "SAD"
description "Sistemas de Apoio a Decisão"

\end_inset

 são sistemas que possuem meios que auxiliam a comparação, analise e apoio
 para escolha de alternativas num processo de decisão.
 Isso é feito usando metodologias feitas por especialistas da área em questão
 
\begin_inset CommandInset citation
LatexCommand citep
key "heinzle2010semantica"

\end_inset

.
\end_layout

\begin_layout Standard
SADs auxiliam tomadores de decisão dando-lhes um maior entendimento do domínio.
 Eles combinam as habilidades dos especialistas (humanos) à capacidade dos
 computadores de acessar uma vasta quantidade de dados, desenvolver modelos,
 interpretar, formular e avaliar alternativas e cenários distintos onde
 podem haver possíveis soluções para os problemas que se quer solucionar
 
\begin_inset CommandInset citation
LatexCommand citep
key "lu2006application"

\end_inset

.
\end_layout

\begin_layout Standard
O autor 
\begin_inset CommandInset citation
LatexCommand citet
key "junior2006sistemas"

\end_inset

 cita algumas vantagens de SADs:
\end_layout

\begin_layout Itemize
Manuseio de extensos volumes de dados: estes sistemas permitem a utilização
 de grandes volumes de dados para analisar resultados;
\end_layout

\begin_layout Itemize
Captação de dados de várias fontes: SADs tem a capacidade de obter dados
 externos e integra-los a dados já existentes;
\end_layout

\begin_layout Itemize
Flexibilidade na geração de relatórios: sistemas desse tipo podem exibir
 relatórios e/ou resultados da forma que ficar melhor ao tomador de decisões;
\end_layout

\begin_layout Itemize
Solução de Problemas: tem-se a capacidade de encontrar melhores soluções
 em problemas simples e encontrar soluções viáveis em problemas complexos;
\end_layout

\begin_layout Itemize
Execução de simulações: um SAD pode fazer modificações teóricas nos dados
 e observar os impactos que isso causa nos resultados;
\end_layout

\begin_layout Itemize
Suporte a todos os níveis de tomada de decisões: esse tipo de sistema pode
 auxiliar em todos os níveis de tomada de decisões dentro de uma organização.
\end_layout

\begin_layout Standard

\lang english
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center

\lang english
\begin_inset Graphics
	filename ../figures/SAD.jpeg
	lyxscale 90
	width 100col%
	clip

\end_inset


\end_layout

\begin_layout Plain Layout

\lang english
\begin_inset Caption Standard

\begin_layout Plain Layout
Componentes de um SAD 
\begin_inset CommandInset citation
LatexCommand citep
key "junior2006sistemas"

\end_inset

.
\begin_inset CommandInset label
LatexCommand label
name "fig:Componentes-SAD"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
A Figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Componentes-SAD"

\end_inset

 mostra os componentes de um SAD.
 Eles podem ser divididos em bancos de dados, banco de modelos e sistema
 de geração de relatórios.
 O banco de modelos armazena os vários modelos que auxiliam a criação de
 cenários para a tomada de decisões.
 Comparado com outras técnicas de criação de cenários (como sistemas especialist
as), o uso de bancos de modelos são vantajosos, pois são menos dispendiosos
 e mais rápidos de implementar.
 É importante também que os bancos de dados sejam mantidos atualizados para
 um resultado confiável.
\end_layout

\begin_layout Section
Arquitetura para Sistemas de Apoio a Decisão
\end_layout

\begin_layout Standard
A arquitetura de um software define a organização em termos de seus componentes,
 suas interconexões, suas interações e também suas principais propriedades
 
\begin_inset CommandInset citation
LatexCommand citep
key "de1997software"

\end_inset

.
 Ela fornece as informações de como os elementos envolvidos nela se relacionam.
 Arquiteturas trabalham a parte externa das ligações entre seus elementos,
 implementações internas desses elementos não são considerados arquiteturais
 
\begin_inset CommandInset citation
LatexCommand citep
key "sei2006architecture"

\end_inset

.
\end_layout

\begin_layout Standard
SADs são criados por especialistas nas áreas de domínio nas quais eles serão
 aplicados e implementados por programadores.
 Esse pode ser um processo lento e custoso, já que os dois grupos de profissiona
is têm 
\emph on
\lang english
backgrounds
\emph default
\lang brazilian
 diferentes e vão ter problemas de comunicação durante o processo de criação
 e testes de um SAD.
 Esses profissionais podem ser até de organizações diferentes, o que dificulta
 ainda mais o processo.
 Devido ao fato de que os elementos básicos de todo o SAD (Figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Componentes-SAD"

\end_inset

) serem muito parecidos, é possível criar uma arquitetura que possa ser
 re\SpecialChar \nobreakdash-
usada em diferentes SADs (ou classes de SADs).
 Esta arquitetura pode ser baseada em componentes de software re\SpecialChar \nobreakdash-
usáveis.
 Programadores podem usar essa arquitetura e re\SpecialChar \nobreakdash-
usar os componentes de software,
 já desenvolvidos para ela, para implementar SADs mais rapidamente.
\end_layout

\begin_layout Standard
Para encontrar e configurar componentes de software de uma arquitetura,
 uma opção é descrever esses componentes, usando uma ontologia, e usar os
 termos dessa ontologia para encontrar os componentes corretos para uma
 aplicação 
\begin_inset CommandInset citation
LatexCommand citep
key "Linhalis2010"

\end_inset

.
 Essas ontologias podem ser criadas utilizando linguagens padrões da Web
 Semântica, como a 
\lang english
Web Ontology Language
\lang brazilian
 (OWL
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "OWL"
description "Web Ontology Language"

\end_inset

), para melhor portabilidade 
\begin_inset CommandInset citation
LatexCommand citep
key "Pahl2007"

\end_inset

.
 Ontologias e padrões da Web Semântica serão abordados com mais profundidade
 no próximo capítulo.
\end_layout

\begin_layout Standard
Ontologias, que descrevam componentes de software para serem usados num
 SAD de um determinado domínio, terão uma grande quantidade de termos derivados
 desse domínio.
 Especialistas desse domínio terão familiaridade com esses termos e poderão
 especificar grande parte do fluxo de trabalho do SAD usando esses termos.
 Idealmente, essa especificação deve ser detalhada o suficiente para que
 programadores possam desenvolver a parte computacional do SAD sem necessidade
 de mais 
\lang english
feedback
\lang brazilian
 dos especialistas.
\end_layout

\begin_layout Standard
Como especialistas de domínio não têm um conhecimento muito detalhado sobre
 linguagens de especificação de sistemas, é necessário o desenvolvimento
 de uma 
\lang english
Domain Specific Language
\lang brazilian
 (DSL) adequada ao nível de conhecimento de computação dos especialistas.
 Essa linguagem também deve conter termos familiares ao domínio desses especiali
stas.
 
\end_layout

\begin_layout Section

\lang english
Domain Specific Languages
\end_layout

\begin_layout Standard
Em desenvolvimento de software e engenharia de domínio uma linguagem de
 domínio específico, em inglês 
\emph on
\lang english
Domain-Specific Language
\lang brazilian
 (DSL)
\emph default
, é um tipo de linguagem de programação ou linguagem de especificação, dedicada
 a um domínio particular de problema, uma técnica de representação de problema
 particular e/ou uma técnica de solução particular.
\end_layout

\begin_layout Standard
O conceito não é novo, linguagens de programação de propósito especifico
 sempre existiram, mas o termo se tornou padrão devido à ascensão da modelagem
 de domínio específico.
\end_layout

\begin_layout Standard
Um usuário, relacionado com um domínio específico, pode usar uma DSL sem
 ter experiência em desenvolvimento de software pois a DSL está relacionada
 com seu domínio de trabalho.
 O autor 
\begin_inset CommandInset citation
LatexCommand citet
key "fowler2010domain"

\end_inset

 diz que programadores instruem o computador no que ele deve fazer, pois
 já entendem a maneira dele trabalhar, mas com DSLs é feito o inverso: o
 computador começa a entender o que o programador (usuário) escreve.
\end_layout

\begin_layout Standard
Com DSLs, usuários que não estejam familiarizados com computação podem ter
 uma maior facilidade no aprendizado de programação.
 No caso de uma arquitetura baseada em componentes para SADs, DSLs podem
 ser criadas para domínios específicos de aplicação.
 Elas utilizariam termos específicos do domínio e, assim, familiares a especiali
stas desse domínio.
 
\end_layout

\begin_layout Standard
Utilizando uma DSL como essa, seria possível a especialistas especificar
 SADs com um grau de detalhamento grande o suficiente para permitir a criação
 automática desses SADs, sem a necessidade da intervenção de programadores.
 Os especialistas poderiam se tornar, na prática, programadores de seus
 próprios SADs.
\end_layout

\begin_layout Standard
No projeto SustenAgro, será desenvolvida uma DSL baseada em duas ontologias,
 uma de avaliação de sustentabilidade e outra de representação de interface
 gráfica, as quais suportaram as funcionalidades da DSL, como a definição
 de indicadores e a ligação deles com os controles visuais para flexibilizar
 a geração dinâmica de interfaces gráficas.
\end_layout

\begin_layout Section
Considerações Finais
\end_layout

\begin_layout Standard
Este capítulo apresentou os conceitos principais de SADs, incluindo arquiteturas
 de software e DSLs.
 Ele também apontou para a necessidade da geração automática (ou semi\SpecialChar \nobreakdash-
automática)
 de interfaces para SADs para que seja possível o desenvolvimento de DSLs
 que permitam a especialistas criar suas próprias SADs.
 Um sistema ou componente de software que implemente essa geração automática
 (ou semi\SpecialChar \nobreakdash-
automática) deverá ser capaz de fazer interface com as DSLs, desenvolvi
das para SADs e as ontologias usadas nesses sistemas.
\end_layout

\end_body
\end_document
